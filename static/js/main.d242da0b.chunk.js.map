{"version":3,"sources":["components/Label.jsx","components/Button.jsx","constants/index.js","components/Menu.jsx","components/GameImage.jsx","components/Timer.jsx","components/GameBoard.jsx","components/GameOver.jsx","App.js","index.js"],"names":["Label","props","className","text","Button","onClick","onClickHandler","buttonName","GAME_STATE","Menu","id","setGameState","GameImage","data","round","coordinates","hints_coordinate","x1","x","y1","y","x2","y2","hx1","hy1","hx2","hy2","Fragment","alt","src","image","e","console","log","pageX","pageY","style","position","border","showHighlight","width","height","top","left","setShowHighlight","setShowHalf","length","setRound","setTimer","time_limit","showHalf","backgroundColor","Timer","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","timer","triggerGameOver","time","Math","max","GameBoard","useState","hints","setHints","removeHint","clickedHint","results","filter","hint","objective","includes","GameOver","gameOverLable","gameState","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d242da0b.chunk.js","sourcesContent":["function Label(props) {\n  return <div className={`label ${props.className}`}>{props.text}</div>;\n}\n\nexport default Label;\n","function Button(props) {\n  return (\n    <button\n      onClick={props.onClickHandler}\n      className={`button ${props.className}`}\n    >\n      {props.buttonName}\n    </button>\n  );\n}\n\nexport default Button;\n","export const GAME_STATE = {\n  MENU: \"Menu\",\n  GAME_BOARD: \"Game Board\",\n  GAME_OVER: \"Game Over\",\n  GAME_WIN: \"Game Win\"\n};\n","import Label from \"./Label\";\nimport Button from \"./Button\";\nimport { GAME_STATE } from \"../constants\";\n\nfunction Menu(props) {\n  const startGame = () => {\n    props.setGameState(GAME_STATE.GAME_BOARD);\n  };\n\n  return (\n    <div id=\"menu\">\n      <Label className=\"menuTitle\" text=\"Hi Menu\" />\n      <Button buttonName=\"Start\" onClickHandler={startGame} />\n      <Button buttonName=\"Score Board\" />\n      <Button buttonName=\"Difficulty\" />\n    </div>\n  );\n}\n\nexport default Menu;\n","import data from \"../data/game-data.json\";\nimport React from \"react\";\nimport { GAME_STATE } from \"../constants\";\n\nfunction GameImage(props) {\n  const { coordinates, hints_coordinate } = data[props.round];\n\n  const { x: x1, y: y1 } = coordinates[0];\n  const { x: x2, y: y2 } = coordinates[1];\n\n  const { x: hx1, y: hy1 } = hints_coordinate[0];\n  const { x: hx2, y: hy2 } = hints_coordinate[1];\n\n  return (\n    <React.Fragment>\n      <img\n        id=\"game-image\"\n        alt=\"\"\n        src={data[props.round].image}\n        onClick={(e) => {\n          console.log(`X:${e.pageX}, Y:${e.pageY}`);\n        }}\n      />\n      <div\n        id=\"target\"\n        style={{\n          position: \"absolute\",\n          border: props.showHighlight ? \"5px solid lime\" : \"none\",\n          width: `${x2 - x1}px`,\n          height: `${y2 - y1}px`,\n          top: `${y1}px`,\n          left: `${x1}px`\n        }}\n        onClick={() => {\n          console.log(\"YOU WIN!\");\n          // Reset hint for highlight\n          props.setShowHighlight(false);\n          props.setShowHalf(false);\n          if (props.round < data.length - 1) {\n            props.setRound(props.round + 1);\n            props.setTimer(data[props.round + 1].time_limit);\n          } else {\n            props.setGameState(GAME_STATE.GAME_WIN);\n          }\n        }}\n      />\n      {props.showHalf ? (\n        <div\n          id=\"half-box\"\n          style={{\n            position: \"absolute\",\n            backgroundColor: \"black\",\n            width: `${hx2 - hx1}px`,\n            height: `${hy2 - hy1}px`,\n            top: `${hy1}px`,\n            left: `${hx1}px`\n          }}\n        />\n      ) : null}\n    </React.Fragment>\n  );\n}\nexport default GameImage;\n","import { useEffect, useRef } from \"react\";\nimport Label from \"./Label\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    let id = setInterval(() => {\n      savedCallback.current();\n    }, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nfunction Timer(props) {\n  useInterval(() => {\n    props.setTimer(props.timer - 1000);\n  }, 1000);\n\n  if (props.timer <= 0) {\n    props.triggerGameOver();\n  }\n\n  const time = Math.max(props.timer / 1000, 0);\n  return <Label className=\"gameBoardTimer\" text={`Timer: ${time}`} />;\n}\n\nexport default Timer;\n","import { useState } from \"react\";\nimport Label from \"./Label\";\nimport Button from \"./Button\";\nimport { GAME_STATE } from \"../constants\";\nimport data from \"../data/game-data.json\";\nimport GameImage from \"./GameImage\";\nimport Timer from \"./Timer\";\n\nfunction GameBoard(props) {\n  const [round, setRound] = useState(0);\n  const [hints, setHints] = useState([\"time\", \"50/50\", \"highlight\"]);\n\n  const [timer, setTimer] = useState(data[round].time_limit);\n\n  // Hint hooks for every game image\n  const [showHighlight, setShowHighlight] = useState(false);\n  const [showHalf, setShowHalf] = useState(false);\n\n  // Create function here to set state back to GAME_STATE.MENU\n  const backToMenu = () => {\n    props.setGameState(GAME_STATE.MENU);\n  };\n\n  // This will set the game to GAME_OVER state\n  const gameOver = () => {\n    props.setGameState(GAME_STATE.GAME_OVER);\n  };\n\n  const removeHint = (clickedHint) => {\n    const results = hints.filter((hint) => hint !== clickedHint);\n    setHints(results);\n  };\n\n  return (\n    <div id=\"game-board\">\n      <Label className=\"gameBoardTitle\" text=\"Waldo Game\" />\n      <Button buttonName=\"Menu\" onClickHandler={backToMenu} />\n      <GameImage\n        round={round}\n        setRound={setRound}\n        showHighlight={showHighlight}\n        setShowHighlight={setShowHighlight}\n        showHalf={showHalf}\n        setShowHalf={setShowHalf}\n        setTimer={setTimer}\n        setGameState={props.setGameState}\n      />\n      <Label\n        className=\"gameBoardObjective\"\n        text={`Objective: ${data[round].objective}`}\n      />\n      <Timer timer={timer} setTimer={setTimer} triggerGameOver={gameOver} />\n\n      {hints.includes(\"time\") && (\n        <Button\n          buttonName=\"Reset Timer\"\n          onClickHandler={() => {\n            // Tell the Timer to reset.\n            setTimer(data[round].time_limit);\n            // Do this after we implement timer.\n            removeHint(\"time\");\n          }}\n        />\n      )}\n      {hints.includes(\"50/50\") && (\n        <Button\n          buttonName=\"50/50 Image\"\n          onClickHandler={() => {\n            // Tell the GameImage to draw the 50/50 Black Box.\n            removeHint(\"50/50\");\n\n            setShowHalf(true);\n          }}\n        />\n      )}\n      {hints.includes(\"highlight\") && (\n        <Button\n          buttonName=\"Highlight\"\n          onClickHandler={() => {\n            // Tell the GameImage to Highlight Around the Image.\n            removeHint(\"highlight\");\n\n            // Set the hint hook to true to toggle hint box for current round\n            setShowHighlight(true);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import Label from \"./Label\";\nimport Button from \"./Button\";\nimport { GAME_STATE } from \"../constants\";\n\nfunction GameOver(props) {\n  const gameState = props.gameState;\n\n  const gameOverLable =\n    gameState === GAME_STATE.GAME_WIN ? \"YOU WIN!!\" : \"GAME OVER!!!\";\n\n  return (\n    <div id=\"game-over\">\n      <Label className=\"gameOver\" text={gameOverLable} />\n      <Button\n        buttonName=\"Back To Menu\"\n        onClickHandler={() => {\n          props.setGameState(GAME_STATE.MENU);\n        }}\n      />\n      <Button\n        buttonName=\"Restart\"\n        onClickHandler={() => {\n          props.setGameState(GAME_STATE.GAME_BOARD);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default GameOver;\n","import { useState } from \"react\";\nimport \"./styles.css\";\nimport Menu from \"./components/Menu\";\nimport GameBoard from \"./components/GameBoard\";\nimport GameOver from \"./components/GameOver\";\n\nimport { GAME_STATE } from \"./constants\";\n\nexport default function App() {\n  // State for the game\n  const [gameState, setGameState] = useState(GAME_STATE.MENU);\n\n  return (\n    <div className=\"App\">\n      {gameState === GAME_STATE.MENU && <Menu setGameState={setGameState} />}\n      {gameState === GAME_STATE.GAME_BOARD && (\n        <GameBoard setGameState={setGameState} />\n      )}\n      {(gameState === GAME_STATE.GAME_OVER ||\n        gameState === GAME_STATE.GAME_WIN) && (\n        <GameOver gameState={gameState} setGameState={setGameState} />\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}